# -*- coding: utf-8 -*-
"""timeseries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U-_8LLNZOEX5tnWsckLXf50xSDD-KM3e
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
from pylab import rcParams
rcParams['figure.figsize']=10, 6

dataset = pd.read_csv('AirPassengers.csv')
# parse strings to datetime type
dataset['Month']= pd.to_datetime(dataset["Month"], infer_datetime_format=True)
indexedDataset = dataset.set_index(['Month'])

from datetime import datetime
indexedDataset.head(5)

##plot graph
plt.xlabel("Date")
plt.ylabel("Number of air passengers")
plt.plot(indexedDataset)

##plot rolling statistics

rolmean = indexedDataset.rolling(window=12).mean()

rolstd= indexedDataset.rolling(window=12).std()
print(rolmean, rolstd)

##plot rolling stat
orig= plt.plot(indexedDataset, color= 'blue', label='Original')
mean = plt.plot(rolmean, color='red', label='Rolling Mean')
std = plt.plot(rolstd, color='black', label='Rolling std')
plt.legend(loc='best')
plt.title('Rolling mean & standard deviation')
plt.show(block=False)

## perform Dickey-fuller test
from statsmodels.tsa.stattools import adfuller

print ('Results of Dickey Fuller test: ')
dftest = adfuller(indexedDataset['#Passengers'], autolag='AIC')

dfoutput = pd.Series(dftest[0:4], index=['Test statistics', 'p-value','#Lags Used', 'number of observations used'])
for key,value in dftest[4].items():
    dfoutput['Critical Value(%s)'%key]= value

print(dfoutput)

##estimating trend
indexedDataset_logscale = np.log(indexedDataset)
plt.plot(indexedDataset_logscale)

movingAverage = indexedDataset_logscale.rolling(window=12).mean()
movingSTD = indexedDataset_logscale.rolling(window=12).std()
plt.plot(indexedDataset_logscale)
plt.plot(movingAverage, color='red')

datasetLogScaleMinusMovingAverage = indexedDataset_logscale - movingAverage
datasetLogScaleMinusMovingAverage.head(12)

##remove nan value
datasetLogScaleMinusMovingAverage.dropna(inplace=True)
datasetLogScaleMinusMovingAverage.head(10)

from statsmodels.tsa.stattools import adfuller
def test_stationarity(timeseries):

    #determining rolling stattistics
    movingAverage= timeseries.rolling(window=12).mean()
    movingSTD= timeseries.rolling(window=12).std()

    #plot rolling statistics
    orig = plt.plot(timeseries, color='blue', label='Original')
    mean = plt.plot(movingAverage, color='red', label='Rolling Mean')
    std = plt.plot(movingSTD, color='black', label='Rolling Std')
    plt.legend(loc='best')
    plt.title('Rolling mean &stadard deviation')
    plt.show(block=False)

    #perform Dickey fuller test
    print ('Results of Dickey Fuller test: ')
    dftest = adfuller(timeseries['#Passengers'], autolag='AIC')

    dfoutput = pd.Series(dftest[0:4], index=['Test statistics', 'p-value','#Lags Used', 'number of observations used'])
    for key,value in dftest[4].items():
         dfoutput['Critical Value(%s)'%key]= value

    print(dfoutput)

test_stationarity(datasetLogScaleMinusMovingAverage)

exponentialDecayweightedAverage = indexedDataset_logscale.ewm(halflife=12, min_periods = 0, adjust=True).mean()
plt.plot(indexedDataset_logscale)
plt.plot(exponentialDecayweightedAverage, color='red')

datasetLogScaleMinusMovingExponentialDecayAverage = indexedDataset_logscale - exponentialDecayweightedAverage
datasetLogScaleMinusMovingExponentialDecayAverage.head(10)
test_stationarity(datasetLogScaleMinusMovingExponentialDecayAverage)

datasetLogDiffShifting = indexedDataset_logscale - indexedDataset_logscale.shift()
plt.plot(datasetLogDiffShifting)

datasetLogDiffShifting.dropna(inplace=True)
test_stationarity(datasetLogDiffShifting)

indexedDataset_logscale.keys()

from statsmodels.tsa.seasonal import seasonal_decompose
decomposition = seasonal_decompose(indexedDataset_logscale)

trend = decomposition.trend
seasonal = decomposition.seasonal
residual = decomposition.resid

plt.subplot(411)
plt.plot(indexedDataset_logscale, label='Original')
plt.legend(loc='best')

plt.subplot(412)
plt.plot(trend, label='Trend')
plt.legend(loc='best')

plt.subplot(413)
plt.plot(seasonal, label='Seasonality')
plt.legend(loc='best')

plt.subplot(414)
plt.plot(residual, label='Residuals')
plt.legend(loc='best')

plt.tight_layout()

decomposedLogData = residual
decomposedLogData.dropna(inplace=True)
test_stationarity(decomposedLogData)

arr = pd.DataFrame(residual)
arr.rename(columns={'resid':'#Passengers'}, inplace=True)
arr.head(10)

decomposedLogData = arr
decomposedLogData.dropna(inplace=True)
decomposedLogData.keys()

test_stationarity(decomposedLogData)

#acf and pacf plots
from statsmodels.tsa.stattools import acf, pacf

lag_acf = acf(datasetLogDiffShifting, nlags=20)
lag_pacf = pacf(datasetLogDiffShifting, nlags=20, method='ols')

#plot acf
plt.subplot(121)
plt.plot(lag_acf)
plt.axhline(y=0,linestyle='--',color='gray')
plt.axhline(y=-1.96/np.sqrt(len(datasetLogDiffShifting)),linestyle='--', color='gray')
plt.axhline(y=1.96/np.sqrt(len(datasetLogDiffShifting)),linestyle='--', color='gray')
plt.title('Autocorrelation Function')


#plot pacf
plt.subplot(122)
plt.plot(lag_pacf)
plt.axhline(y=0,linestyle='--',color='gray')
plt.axhline(y=-1.96/np.sqrt(len(datasetLogDiffShifting)),linestyle='--', color='gray')
plt.axhline(y=1.96/np.sqrt(len(datasetLogDiffShifting)),linestyle='--', color='gray')
plt.title('Partial Autocorrelation Function')

plt.tight_layout()

from statsmodels.tsa.arima_model import ARIMA

#AR model
model = ARIMA(indexedDataset_logscale, order=(2,1,0))
results_AR = model.fit(disp=-1)
plt.plot(datasetLogDiffShifting)
plt.plot(results_AR.fittedvalues, color= 'red')
plt.title('RSS: %.4f' % sum((results_AR.fittedvalues-datasetLogDiffShifting["#Passengers"])**2))
print('Plotting AR model')

#RSS score should be as less as possible..... 2,1,2 is giving less value

#MA MODEL
model = ARIMA(indexedDataset_logscale, order=(0,1,2))
results_MA = model.fit(disp=-1)
plt.plot(datasetLogDiffShifting)
plt.plot(results_MA.fittedvalues, color= 'red')
plt.title('RSS: %.4f' % sum((results_MA.fittedvalues-datasetLogDiffShifting["#Passengers"])**2))
print('Plotting MA model')

#ARIMA model
model = ARIMA(indexedDataset_logscale, order=(2,1,2))
results_ARIMA = model.fit(disp=-1)
plt.plot(datasetLogDiffShifting)
plt.plot(results_AR.fittedvalues, color= 'red')
plt.title('RSS: %.4f' % sum((results_ARIMA.fittedvalues-datasetLogDiffShifting["#Passengers"])**2))
print('Plotting ARIMA model')

predictions_ARIMA_diff = pd.Series(results_ARIMA.fittedvalues, copy=True)
print(predictions_ARIMA_diff.head())

#convert to cummulative sum
predictions_ARIMA_diff_cumsum = predictions_ARIMA_diff.cumsum()
print(predictions_ARIMA_diff_cumsum.head())

predictions_ARIMA_log = pd.Series(indexedDataset_logscale['#Passengers'].iloc[0],index=indexedDataset_logscale.index)
predictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cumsum,fill_value=0)
predictions_ARIMA_log.head()

predictions_ARIMA = np.exp(predictions_ARIMA_log)
plt.plot(indexedDataset)
plt.plot(predictions_ARIMA)

indexedDataset_logscale

results_ARIMA.plot_predict(1,264)

results_ARIMA.forecast(steps=120)